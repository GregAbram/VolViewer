// ======================================================================== //
// Copyright 2009-2015 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "ospray/common/default.ih"
#include "ospray/math/vec.ih"
#include "ospray/math/AffineSpace.ih"
#include "ospray/common/Ray.ih"

struct Texture2D;

typedef void (*Texture2D_get)(const uniform Texture2D *uniform this,
                              // use a retvalue ptr here, that's faster than copying
                              varying vec4f &retValue,
                              const varying vec2f &p);

struct Texture2D {
  vec2ui        size;
  vec2f         f_size;   // size, in floats
  vec2f         f_size_1; // size - 1 : maximum valid pixel ID (to clamp against)
  Texture2D_get get;
  void         *data;
};


/*! helper function that returns the sampled value for the first
  channel of the given texture

  Right now, this function always asks the texture for all four
  channels, and then discards all but one; later implementations may
  have specialized 'get1f' methods with the texture

  \note tex may NOT be NULL!
*/
inline float get1f(const uniform Texture2D *uniform tex,
                   const varying vec2f where)
{
  vec4f ret;
  tex->get(tex,ret,where);
  return ret.x;
}

/*! helper function that returns the sampled value for the first three
  channels of the given texture

  Right now, this function always asks the texture for all four
  channels, and then discards all but one; later implementations may
  have specialized 'get3f' methods with the texture

  \note tex may NOT be NULL!
*/
inline vec3f get3f(const uniform Texture2D *uniform tex,
                   const varying vec2f where)
{
  vec4f ret;
  tex->get(tex,ret,where);
  return make_vec3f(ret);
}

/*! helper function that returns the sampled value of the four
  channels of the given texture.

  Note that it's up to the texture to define clearly what happens if
  we ask for four channels even if the texture has less physical
  channels.

  \note tex may NOT be NULL!
*/
inline vec4f get4f(const uniform Texture2D *uniform tex,
                   const varying vec2f where)
{
  vec4f ret;
  tex->get(tex,ret,where);
  return ret;
}




/*! helper function: get4f() with a default value if the texture is NULL */
inline float get1f(const uniform Texture2D *uniform tex,
                   const varying vec2f where,
                   const varying float defaultValue)
{
  if (tex == NULL) return defaultValue;
  else return get1f(tex,where);
}

/*! helper function: get4f() with a default value if the texture is NULL */
inline vec3f get3f(const uniform Texture2D *uniform tex,
                   const varying vec2f where,
                   const varying vec3f defaultValue)
{
  if (tex == NULL) return defaultValue;
  else return get3f(tex,where);
}

/*! helper function: get4f() with a default value if the texture is NULL */
inline vec4f get4f(const uniform Texture2D *uniform tex,
                   const varying vec2f where,
                   const varying vec4f defaultValue)
{
  if (tex == NULL) return defaultValue;
  else return get4f(tex,where);
}

