// ======================================================================== //
// Copyright 2009-2015 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "Tile.ih"
/*! \file framebuffer.ih Defines the abstract base class of an ISPC frame buffer */

struct FrameBuffer;

/*! \brief Fct pointer type for 'virtual' method that sets a pixel */
typedef void (*SetTileMethod)(uniform FrameBuffer  *uniform,
                              uniform Tile &);
/*! \brief Fct pointer type for 'virtual' method that sets a pixel */
typedef void (*AccumTileMethod)(uniform FrameBuffer  *uniform,
                                uniform Tile &);

/*! app-mappable format of the color buffer. make sure that this
  matches the definition on the ISPC side */
typedef enum { 
  ColorBufferFormat_NONE, /*!< app will never map the color buffer (e.g., for a
                            framebuffer attached to a display wall that will likely
                            have a different res that the app has...) */
  ColorBufferFormat_RGBA_UINT8, /*! app will map in RGBA, one uint8 per channel */
  ColorBufferFormat_RGB_UINT8, /*! app will map in RGBA, one uint8 per channel */
  ColorBufferFormat_RGBA_FLOAT32, /*! app will map in RBGA, one float per channel */
} FrameBuffer_ColorBufferFormat;
    

struct FrameBuffer 
{
  SetTileMethod     setTile;
  AccumTileMethod   accumTile;

  vec2i size; /*!< size (width x height) of frame buffer, in pixels */
  vec2f rcpSize; /*! one over size (precomputed) */
  int32 accumID;

  FrameBuffer_ColorBufferFormat colorBufferFormat;

  void *cClassPtr; /*!< pointer back to c++-side of this class */
};

