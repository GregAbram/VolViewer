// ======================================================================== //
// Copyright 2009-2015 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "ospray/common/OSPCommon.ih"
#include "ospray/math/region.ih"
#include "tileSize.h"

/*! a screen tile. the memory layout of this class has to _exactly_
  match the (C++-)one in tile.h */
struct Tile {
  uniform float  r[TILE_SIZE*TILE_SIZE]; /*!< red */
  uniform float  g[TILE_SIZE*TILE_SIZE]; /*!< green */
  uniform float  b[TILE_SIZE*TILE_SIZE]; /*!< blue */
  uniform float  a[TILE_SIZE*TILE_SIZE]; /*!< alpha */
  uniform float  z[TILE_SIZE*TILE_SIZE]; /*!< depth */
  uniform region2i region;
  uniform vec2i    fbSize;
  uniform vec2f    rcp_fbSize;
};

inline vec4f setRGBA(uniform Tile &tile, varying uint32 i, const varying vec4f rgba)
{ 
  tile.r[i] = rgba.x;
  tile.g[i] = rgba.y;
  tile.b[i] = rgba.z;
  tile.a[i] = rgba.w;
}

inline void setRGBA(uniform Tile &tile, const varying uint32 i,
                    const varying vec3f rgb, const varying float alpha=0.f)
{
  tile.r[i] = rgb.x;
  tile.g[i] = rgb.y;
  tile.b[i] = rgb.z;
  tile.a[i] = alpha;
}

inline void setRGBAZ(uniform Tile &tile, const varying uint32 i,
                     const varying vec3f rgb, 
                     const varying float alpha,
                     const varying float z)
{
  tile.r[i] = rgb.x;
  tile.g[i] = rgb.y;
  tile.b[i] = rgb.z;
  tile.a[i] = alpha;
  tile.z[i] = z;
}

inline void setRGBA(uniform Tile &tile, const varying uint32 i,
                    const varying vec4f rgba)
{
  tile.r[i] = rgba.x;
  tile.g[i] = rgba.y;
  tile.b[i] = rgba.z;
  tile.a[i] = rgba.w;
}

inline varying vec4f getRGBA(uniform Tile &tile, const varying uint32 i)
{ return make_vec4f(tile.r[i],tile.g[i],tile.b[i],tile.a[i]); }


