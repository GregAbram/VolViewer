// ======================================================================== //
// Copyright 2009-2015 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "math.ih"

#define __define_ispc_vector2(TYPE,ABB)         \
  struct vec2##ABB {                            \
    TYPE x; TYPE y;                             \
  };                                            \
  
#define __define_ispc_vector3(TYPE,ABB)         \
  struct vec3##ABB {                            \
    TYPE x,y,z;                                 \
  };                                            \
  struct vec3##ABB##a {                         \
    TYPE x,y,z,a;                               \
  };                                            \
  
#define __define_ispc_vector4(TYPE,ABB)         \
  struct vec4##ABB {                            \
    TYPE x,y,z,w;                               \
  };                                            \

__define_ispc_vector2(int,i);
__define_ispc_vector2(unsigned int,ui);
__define_ispc_vector2(unsigned int8,uc);
__define_ispc_vector2(float,f);

__define_ispc_vector3(int,i);
__define_ispc_vector3(unsigned int,ui);
__define_ispc_vector3(unsigned int8,uc);
__define_ispc_vector3(float,f);

__define_ispc_vector4(int,i);
__define_ispc_vector4(unsigned int,ui);
__define_ispc_vector4(unsigned int8,uc);
__define_ispc_vector4(float,f);

#undef __define_ispc_vector2
#undef __define_ispc_vector3
#undef __define_ispc_vector4




/*! defines all constructors "make_vec2[T]" for 2-vector type */
#define __define_ispc_constructors2(UV,TYPE,ABB,ITYPE,IABB) \
  inline UV vec2##ABB make_vec2##ABB(const UV ITYPE x,      \
                                     const UV ITYPE y)      \
  {                                                         \
    UV vec2##ABB ret;                                       \
    ret.x = x;                                              \
    ret.y = y;                                              \
    return ret;                                             \
  }                                                         \
  
/*! defines all constructors "make_vec3[T]" and "make_vec3[T]a" for
  3-vector type */
#define __define_ispc_constructors3(UV,TYPE,ABB,ITYPE,IABB)       \
  inline UV vec3##ABB make_vec3##ABB(const UV ITYPE x)            \
  {                                                               \
    UV vec3##ABB ret;                                             \
    ret.x = x;                                                    \
    ret.y = x;                                                    \
    ret.z = x;                                                    \
    return ret;                                                   \
  }                                                               \
  inline UV vec3##ABB make_vec3##ABB(const UV vec3##IABB v)            \
  {                                                               \
    UV vec3##ABB ret;                                             \
    ret.x = v.x;                                                    \
    ret.y = v.y;                                                    \
    ret.z = v.z;                                                    \
    return ret;                                                   \
  }                                                               \
  inline UV vec3##ABB make_vec3##ABB(const UV vec3##IABB##a v)    \
  {                                                               \
    UV vec3##ABB ret;                                             \
    ret.x = v.x;                                                  \
    ret.y = v.y;                                                  \
    ret.z = v.z;                                                  \
    return ret;                                                   \
  }                                                               \
  inline UV vec3##ABB##a make_vec3##ABB##a(const UV ITYPE x)      \
  {                                                               \
    UV vec3##ABB##a ret;                                          \
    ret.x = x;                                                    \
    ret.y = x;                                                    \
    ret.z = x;                                                    \
    return ret;                                                   \
  }                                                               \
  inline UV vec3##ABB make_vec3##ABB(const UV ITYPE x,            \
                                     const UV ITYPE y,            \
                                     const UV ITYPE z)            \
  {                                                               \
    UV vec3##ABB ret;                                             \
    ret.x = x;                                                    \
    ret.y = y;                                                    \
    ret.z = z;                                                    \
    return ret;                                                   \
  }                                                               \
  inline UV vec3##ABB##a make_vec3##ABB##a(const UV ITYPE x,      \
                                           const UV ITYPE y,      \
                                           const UV ITYPE z)      \
  {                                                               \
    UV vec3##ABB##a ret;                                          \
    ret.x = x;                                                    \
    ret.y = y;                                                    \
    ret.z = z;                                                    \
    return ret;                                                   \
  }                                                               \
  inline UV vec3##ABB make_vec3##ABB(const UV vec4##IABB v)       \
  {                                                               \
    UV vec3##ABB ret;                                             \
    ret.x = v.x;                                                  \
    ret.y = v.y;                                                  \
    ret.z = v.z;                                                  \
    return ret;                                                   \
  }                                                               \
  inline UV vec3##ABB##a make_vec3##ABB##a(const UV vec4##IABB v) \
  {                                                               \
    UV vec3##ABB##a ret;                                          \
    ret.x = v.x;                                                  \
    ret.y = v.y;                                                  \
    ret.z = v.z;                                                  \
    return ret;                                                   \
  }                                                               \
  
/*! defines all constructors "make_vec4[T]" for 4-vector type */
#define __define_ispc_constructors4(UV,TYPE,ABB,ITYPE,IABB) \
  /*! construct vec4 from a single scalar */                \
  inline UV vec4##ABB make_vec4##ABB(const UV ITYPE f)      \
  {                                                         \
    UV vec4##ABB ret;                                       \
    ret.x = f;                                              \
    ret.y = f;                                              \
    ret.z = f;                                              \
    ret.w = f;                                              \
    return ret;                                             \
  }                                                         \
  /*! construct vec4 from a 4 scalars */                    \
  inline UV vec4##ABB make_vec4##ABB(const UV ITYPE x,      \
                                     const UV ITYPE y,      \
                                     const UV ITYPE z,      \
                                     const UV ITYPE w)      \
  {                                                         \
    UV vec4##ABB ret;                                       \
    ret.x = x;                                              \
    ret.y = y;                                              \
    ret.z = z;                                              \
    ret.w = w;                                              \
    return ret;                                             \
  }                                                         \
  /*! construct vec4 from another vec4 (of another type) */ \
  inline UV vec4##ABB make_vec4##ABB(const UV vec4##IABB v) \
  {                                                         \
    UV vec4##ABB ret;                                       \
    ret.x = v.x;                                            \
    ret.y = v.y;                                            \
    ret.z = v.z;                                            \
    ret.w = v.w;                                            \
    return ret;                                             \
  }                                                         \


#define __define_ispc_lift_constructors4(UV,TYPE,ABB)       \
  /*! lift vec4 from vec3; fill in with 0es */              \
  inline UV vec4##ABB make_vec4##ABB(const UV vec3##ABB v)  \
  {                                                         \
    UV vec4##ABB ret;                                       \
    ret.x = (TYPE)v.x;                                      \
    ret.y = (TYPE)v.y;                                      \
    ret.z = (TYPE)v.z;                                      \
    ret.w = (TYPE)0;                                        \
    return ret;                                             \
  }                                                         \
  
#define __define_ispc_constructors_uv_t(UV,OTYPE,OABB,ITYPE,IABB) \
  __define_ispc_constructors2(UV,OTYPE,OABB,ITYPE,IABB)           \
  __define_ispc_constructors3(UV,OTYPE,OABB,ITYPE,IABB)           \
  __define_ispc_constructors4(UV,OTYPE,OABB,ITYPE,IABB)           \
  
#define __define_ispc_constructors_uv(UV,TYPE,ABB)              \
  __define_ispc_constructors_uv_t(UV,TYPE,ABB,int,i)            \
  __define_ispc_constructors_uv_t(UV,TYPE,ABB,unsigned int,ui)  \
  __define_ispc_constructors_uv_t(UV,TYPE,ABB,unsigned int8,uc) \
  __define_ispc_constructors_uv_t(UV,TYPE,ABB,float,f)          \
  __define_ispc_lift_constructors4(UV,TYPE,ABB)                 \
  
#define __define_ispc_constructors(UV)               \
  __define_ispc_constructors_uv(UV,unsigned int,ui)  \
  __define_ispc_constructors_uv(UV,unsigned int8,uc) \
  __define_ispc_constructors_uv(UV,int,i)            \
  __define_ispc_constructors_uv(UV,float,f)          \
  
__define_ispc_constructors(uniform);
__define_ispc_constructors(varying);

#undef __define_ispc_constructors2
#undef __define_ispc_constructors3
#undef __define_ispc_constructors3a
#undef __define_ispc_constructors4
#undef __define_ispc_lift_constructors4
#undef __define_ispc_constructors_uv
#undef __define_ispc_constructors


// =======================================================
// define 'lifted' binary operators (min/max/...)

#define __lift_binaryFct(FCT,T)                                         \
  inline uniform vec3##T FCT(const uniform vec3##T a, const uniform vec3##T b) \
  {  return make_vec3##T(FCT(a.x,b.x),FCT(a.y,b.y),FCT(a.z,b.z)); }     \
  inline varying vec3##T FCT(const varying vec3##T a, const varying vec3##T b) \
  {  return make_vec3##T(FCT(a.x,b.x),FCT(a.y,b.y),FCT(a.z,b.z)); }     \
  inline uniform vec4##T FCT(const uniform vec4##T a, const uniform vec4##T b) \
  {  return make_vec4##T(FCT(a.x,b.x),FCT(a.y,b.y),FCT(a.z,b.z),FCT(a.w,b.w)); }     \
  inline varying vec4##T FCT(const varying vec4##T a, const varying vec4##T b) \
  {  return make_vec4##T(FCT(a.x,b.x),FCT(a.y,b.y),FCT(a.z,b.z),FCT(a.w,b.w)); }     \


__lift_binaryFct(min,f)
__lift_binaryFct(max,f)

#undef __lift_binaryFct3

// =======================================================

// for now, let's implement those manually - should eventually do those via a macro!

inline uniform vec3f neg(const uniform vec3f v)
{ return make_vec3f(-v.x,-v.y,-v.z); }
inline vec3f neg(const vec3f v)
{ return make_vec3f(-v.x,-v.y,-v.z); }
inline uniform vec3f negate(const uniform vec3f &a)
{ return(make_vec3f(-a.x, -a.y, -a.z)); }
inline varying vec3f negate(const varying vec3f &a)
{ return(make_vec3f(-a.x, -a.y, -a.z)); }


#define __define_binary_operator(opname,op)                             \
  /* vec2f */                                                           \
  inline uniform vec2f opname (const uniform vec2f a,                   \
                               const uniform vec2f b) {                 \
    return make_vec2f(a.x op b.x, a.y op b.y);                          \
  }                                                                     \
  inline vec2f opname (const vec2f a, const vec2f b) {                  \
    return make_vec2f(a.x op b.x, a.y op b.y);                          \
  }                                                                     \
  inline uniform vec2f opname (const uniform vec2f a,                   \
                               const uniform float b) {                 \
    return make_vec2f(a.x op b, a.y op b);                              \
  }                                                                     \
  inline vec2f opname (const vec2f a, const float b) {                  \
    return make_vec2f(a.x op b, a.y op b);                              \
  }                                                                     \
  inline uniform vec2f opname (const uniform float a,                   \
                               const uniform vec2f b) {                 \
    return make_vec2f(a op b.x, a op b.y);                              \
  }                                                                     \
  inline vec2f opname (const float a, const vec2f b) {                  \
    return make_vec2f(a op b.x, a op b.y);                              \
  }                                                                     \
  /* vec3f */                                                           \
  inline uniform vec3f opname (const uniform vec3f a,                   \
                               const uniform vec3f b) {                 \
    return make_vec3f(a.x op b.x, a.y op b.y, a.z op b.z);              \
  }                                                                     \
  inline vec3f opname (const vec3f a, const vec3f b) {                  \
    return make_vec3f(a.x op b.x, a.y op b.y, a.z op b.z);              \
  }                                                                     \
  inline uniform vec3f opname (const uniform vec3f a,                   \
                               const uniform float b) {                 \
    return make_vec3f(a.x op b, a.y op b, a.z op b);                    \
  }                                                                     \
  inline vec3f opname (const vec3f a, const float b) {                  \
    return make_vec3f(a.x op b, a.y op b, a.z op b);                    \
  }                                                                     \
  inline uniform vec3f opname (const uniform float a,                   \
                               const uniform vec3f b) {                 \
    return make_vec3f(a op b.x, a op b.y, a op b.z);                    \
  }                                                                     \
  inline vec3f opname (const float a, const vec3f b) {                  \
    return make_vec3f(a op b.x, a op b.y, a op b.z);                    \
  }                                                                     \
  /* vec4f */                                                           \
  inline uniform vec4f opname (const uniform vec4f a,                   \
                               const uniform vec4f b) {                 \
    return make_vec4f(a.x op b.x, a.y op b.y, a.z op b.z, a.w op b.w);  \
  }                                                                     \
  inline vec4f opname (const vec4f a, const vec4f b) {                  \
    return make_vec4f(a.x op b.x, a.y op b.y, a.z op b.z, a.w op b.w);  \
  }                                                                     \
  inline uniform vec4f opname (const uniform vec4f a,                   \
                               const uniform float b) {                 \
    return make_vec4f(a.x op b, a.y op b, a.z op b, a.w op b);          \
  }                                                                     \
  inline vec4f opname (const vec4f a, const float b) {                  \
    return make_vec4f(a.x op b, a.y op b, a.z op b, a.w op b);          \
  }                                                                     \
  inline uniform vec4f opname (const uniform float a,                   \
                               const uniform vec4f b) {                 \
    return make_vec4f(a op b.x, a op b.y, a op b.z, a op b.w);          \
  }                                                                     \
  inline vec4f opname (const float a, const vec4f b) {                  \
    return make_vec4f(a op b.x, a op b.y, a op b.z, a op b.w);          \
  }                                                                     \

// define 'regular' operators  
__define_binary_operator( operator+, + );
__define_binary_operator( operator-, - );
__define_binary_operator( operator*, * );
__define_binary_operator( operator/, / );

// define old functional operators as used in the embree path tracer, deprecated
__define_binary_operator( add, + );
__define_binary_operator( sub, - );
__define_binary_operator( mul, * );

#undef __define_binary_operator

inline float reduce_max(const vec3f v)
{ return max(max(v.x,v.y),v.z); }

inline uniform bool eq(const uniform vec2f a, const uniform vec2f b)
{ return a.x==b.x && a.y==b.y; }
inline bool eq(const vec2f a, const vec2f b)
{ return a.x==b.x & a.y==b.y; }
inline uniform bool eq(const uniform vec3f a, const uniform vec3f b)
{ return a.x==b.x && a.y==b.y && a.z==b.z; }
inline bool eq(const vec3f a, const vec3f b)
{ return a.x==b.x & a.y==b.y & a.z==b.z; }

inline uniform bool ne(const uniform vec2f a, const uniform vec2f b)
{ return !eq(a,b); }
inline bool ne(const vec2f a, const vec2f b)
{ return !eq(a,b); }
inline uniform bool ne(const uniform vec3f a, const uniform vec3f b)
{ return !eq(a,b); }
inline bool ne(const vec3f a, const vec3f b)
{ return !eq(a,b); }


// ------------------------------------------------------------------
// dot product
// ------------------------------------------------------------------
/*! computes 3D dot product for *all-uniform* vec3fs */
inline uniform float dot(const uniform vec3f a, const uniform vec3f b)
{ return a.x*b.x+a.y*b.y+a.z*b.z; }
/*! computes 3D dot product for vec3fs that produce varying results */
inline float dot(const vec3f a, const vec3f b)
{ return a.x*b.x+a.y*b.y+a.z*b.z; }

inline uniform float length(const uniform vec3f a) { return sqrtf(dot(a,a)); }
inline varying float length(const varying vec3f a) { return sqrtf(dot(a,a)); }

inline uniform float distance(const uniform vec3f a, const uniform vec3f b) { return length(sub(a,b)); }
inline varying float distance(const varying vec3f a, const uniform vec3f b) { return length(sub(a,b)); }


// ------------------------------------------------------------------
// cross product
// ------------------------------------------------------------------
/*! computes 3D cross product for *all-uniform* vec3fs */
inline uniform vec3f cross(const uniform vec3f &a, const uniform vec3f &b)
{ return make_vec3f(a.y*b.z-a.z*b.y,
                    a.z*b.x-a.x*b.z,
                    a.x*b.y-a.y*b.x); }
/*! computes 3D cross product for vec3fs that produce varying results */
inline vec3f cross(const vec3f &a, const vec3f &b)
{ return make_vec3f(a.y*b.z-a.z*b.y,
                    a.z*b.x-a.x*b.z,
                    a.x*b.y-a.y*b.x); }


// ------------------------------------------------------------------
// normalize
// ------------------------------------------------------------------
/*! compute and return normalized version of uniform vec3f passed to this fct */
inline uniform vec3f normalize(const uniform vec3f &v) 
{ return v * (1.f/sqrt(dot(v,v))); }
/*! compute and return normalized version of varying vec3f passed to this fct */
inline vec3f normalize(const vec3f v) 
{ return v * (1.f/sqrt(dot(v,v))); }
/*! compute and return normalized version of varying vec3f passed to this fct */
inline vec3f normalize(const vec3f v, float &len) 
{ len = sqrtf(dot(v,v)); return v * rcpf(len); }



#define __lift_unary_fct(F)                     \
  inline uniform vec3f F(const uniform vec3f v) \
  { return make_vec3f(F(v.x),F(v.y),F(v.z)); }  \
  inline vec3f F(const vec3f v)                 \
  { return make_vec3f(F(v.x),F(v.y),F(v.z)); }

__lift_unary_fct(absf)
__lift_unary_fct(rcpf)
__lift_unary_fct(expf)
__lift_unary_fct(logf)

__lift_unary_fct(rcp)
__lift_unary_fct(exp)

#undef __lift_unary_fct


// // ------------------------------------------------------------------
// // vector functions (abs,rcp,...):
// // ------------------------------------------------------------------
// /*! return vector of absolute values of input vector */
// inline uniform vec3f abs(const uniform vec3f v) 
// { return make_vec3f(abs(v.x),abs(v.y),abs(v.z)); }
// /*! return vector of absolute values of input vector */
// inline vec3f abs(const vec3f v) 
// { return make_vec3f(abs(v.x),abs(v.y),abs(v.z)); }
// /*! return vector of reciprocals of input vector */
// inline uniform vec3f rcp(const uniform vec3f v) 
// { return make_vec3f(rcp(v.x),rcp(v.y),rcp(v.z)); }
// /*! return vector of reciprocals of input vector */
// inline vec3f rcp(const vec3f v) 
// { return make_vec3f(rcp(v.x),rcp(v.y),rcp(v.z)); }

#define __define_lerp2(ABB) \
inline uniform vec2##ABB lerp(uniform float factor, const uniform vec2##ABB a, const uniform vec2##ABB b) \
{                                                                                                 \
  return make_vec2##ABB(lerp(factor, a.x, b.x), lerp(factor, a.y, b.y));                          \
}                                                                                                 \
inline vec2##ABB lerp(float factor, const vec2##ABB a, const vec2##ABB b)                         \
{                                                                                                 \
  return make_vec2##ABB(lerp(factor, a.x, b.x), lerp(factor, a.y, b.y));                          \
}

#define __define_lerp3(ABB) \
inline uniform vec3##ABB lerp(uniform float factor, const uniform vec3##ABB a, const uniform vec3##ABB b) \
{                                                                                                 \
  return make_vec3##ABB(lerp(factor, a.x, b.x), lerp(factor, a.y, b.y), lerp(factor, a.z, b.z));  \
}                                                                                                 \
inline vec3##ABB lerp(float factor, const vec3##ABB a, const vec3##ABB b)                         \
{                                                                                                 \
  return make_vec3##ABB(lerp(factor, a.x, b.x), lerp(factor, a.y, b.y), lerp(factor, a.z, b.z));  \
}                                                                                                 \

#define __define_lerp3a(ABB)\
inline uniform vec3##ABB##a lerp(uniform float factor, const uniform vec3##ABB##a a, const uniform vec3##ABB##a b)                    \
{                                                                                                                                     \
  return make_vec3##ABB##a(lerp(factor, a.x, b.x), lerp(factor, a.y, b.y), lerp(factor, a.z, b.z), lerp(factor, a.a, b.a));           \
}                                                                                                                                     \
inline vec3##ABB##a lerp(float factor, const vec3##ABB##a a, const vec3##ABB##a b)                                                    \
{                                                                                                                                     \
  return make_vec3##ABB##a(lerp(factor, a.x, b.x), lerp(factor, a.y, b.y), lerp(factor, a.z, b.z));                                   \
}

#define __define_lerp4(ABB) \
inline uniform vec4##ABB lerp(uniform float factor, const uniform vec4##ABB a, const uniform vec4##ABB b)                          \
{                                                                                                                                  \
  return make_vec4##ABB(lerp(factor, a.x, b.x), lerp(factor, a.y, b.y), lerp(factor, a.z, b.z), lerp(factor, a.w, b.w));           \
}                                                                                                                                  \
inline vec4##ABB lerp(float factor, const vec4##ABB a, const vec4##ABB b)                                                          \
{                                                                                                                                  \
  return make_vec4##ABB(lerp(factor, a.x, b.x), lerp(factor, a.y, b.y), lerp(factor, a.z, b.z), lerp(factor, a.w, b.w));           \
}

__define_lerp2(f)
__define_lerp2(i)
__define_lerp2(ui)
__define_lerp2(uc)
__define_lerp3(f)
__define_lerp3(i)
__define_lerp3(ui)
__define_lerp3(uc)
//__define_lerp3a(i)
//__define_lerp3a(ui)
//__define_lerp3a(uc)
__define_lerp4(f)
__define_lerp4(i)
__define_lerp4(ui)
__define_lerp4(uc)

#undef __define_lerp2
#undef __define_lerp3
#undef __define_lerp4

inline uniform vec3i operator*(const uniform vec3i &a, const uniform int b)
{ return(make_vec3i(a.x * b, a.y * b, a.z * b)); }

inline uniform vec3i operator+(const uniform vec3i &a, const uniform vec3i &b)
{ return(make_vec3i(a.x + b.x, a.y + b.y, a.z + b.z)); }

inline vec3i operator+(const varying vec3i &a, const varying vec3i &b)
{ return(make_vec3i(a.x + b.x, a.y + b.y, a.z + b.z)); }

// Workaround for compiler bug.
inline vec3i operator+(const uniform vec3i &a, const varying vec3i &b)
{ return(make_vec3i(a.x + b.x, a.y + b.y, a.z + b.z)); }

inline vec3i operator+(const varying vec3i &a, const varying int32 b)
{ return(make_vec3i(a.x + b, a.y + b, a.z + b)); }

inline uniform vec3i operator+(const uniform vec3i &a, const uniform int b)
{ return(make_vec3i(a.x + b, a.y + b, a.z + b)); }

inline uniform vec3i operator-(const uniform vec3i &a, const uniform int b)
{ return(make_vec3i(a.x - b, a.y - b, a.z - b)); }

inline vec3i operator-(const varying vec3i &a, const uniform vec3i &b)
{ return(make_vec3i(a.x - b.x, a.y - b.y, a.z - b.z)); }

inline vec3i operator-(const varying vec3i &a, const varying vec3i &b)
{ return(make_vec3i(a.x - b.x, a.y - b.y, a.z - b.z)); }

inline vec3i operator-(const varying vec3i &a, const varying int32 b)
{ return(make_vec3i(a.x - b, a.y - b, a.z - b)); }

inline uniform vec3i operator/(const uniform vec3i &a, const uniform int b)
{ return(make_vec3i(a.x / b, a.y / b, a.z / b)); }

inline vec3i max(const varying vec3i &a, const varying int32 b)
{ return(make_vec3i(max(a.x, b), max(a.y, b), max(a.z, b))); }

inline vec3i min(const uniform vec3i &a, const varying vec3i &b)
{ return(make_vec3i(min(a.x, b.x), min(a.y, b.y), min(a.z, b.z))); }

inline vec3f float_cast(const vec3i &a)
{ return(make_vec3f(a.x, a.y, a.z)); }

inline vec3i integer_cast(const vec3f &a)
{ return(make_vec3i((int) a.x, (int) a.y, (int) a.z)); }

inline vec3i operator>>(const vec3i &a, const int b)
{ return(make_vec3i(a.x >> b, a.y >> b, a.z >> b)); }

inline vec3i operator<<(const vec3i &a, const int b)
{ return(make_vec3i(a.x << b, a.y << b, a.z << b)); }

inline vec3i bitwise_AND(const vec3i &a, const int b)
{ return(make_vec3i(a.x & b, a.y & b, a.z &b)); }

inline vec3f powf(const vec3f v, const float f)
{ return make_vec3f(powf(v.x,f),powf(v.y,f),powf(v.z,f)); }

inline uniform vec3f powf(const uniform vec3f v, const uniform float f)
{ return make_vec3f(powf(v.x,f),powf(v.y,f),powf(v.z,f)); }

inline uniform vec3fa make_vec3fa(const uniform vec3f v)
{ return make_vec3fa(v.x,v.y,v.z); }

inline vec3fa make_vec3fa(const vec3f v)
{ return make_vec3fa(v.x,v.y,v.z); }

inline vec3f clamp(const vec3f &a, const uniform vec3f &b, const uniform vec3f &c)
{ return(make_vec3f(clamp(a.x, b.x, c.x), clamp(a.y, b.y, c.y), clamp(a.z, b.z, c.z))); }

//! The next machine representable number from 'a' in the direction of 'b'.
inline uniform vec3f nextafter(const uniform vec3i &a, const uniform vec3i &b)
{ return(make_vec3f(nextafter(a.x, b.x), nextafter(a.y, b.y), nextafter(a.z, b.z))); }

inline varying float reduce_min(const varying vec3f &a)
{ return(min(min(a.x, a.y), a.z)); }

inline varying float reduce_min(const varying vec4f &a)
{ return(min(min(min(a.x, a.y), a.z), a.w)); }

inline uniform float reduce_min(const uniform vec3f &a)
{ return(min(min(a.x, a.y), a.z)); }

inline uniform float reduce_max(const uniform vec3i &a)
{ return(max(max(a.x, a.y), a.z)); }

inline uniform float reduce_max(const uniform vec3f &a)
{ return(max(max(a.x, a.y), a.z)); }

inline varying vec3f pow(const varying vec3f &a, const varying float b)
{ return(make_vec3f(pow(a.x, b), pow(a.y, b), pow(a.z, b))); }

inline varying vec4f pow(const varying vec4f &a, const varying float b)
{ return(make_vec4f(pow(a.x, b), pow(a.y, b), pow(a.z, b), pow(a.w, b))); }

inline uniform bool isnan(uniform vec3f v)
{ return isnan(v.x+v.y+v.z); }

inline bool isnan(vec3f v)
{ return isnan(v.x+v.y+v.z); }


