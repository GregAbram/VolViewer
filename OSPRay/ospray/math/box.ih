// ======================================================================== //
// Copyright 2009-2015 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "vec.ih"

struct box2f {
  vec2f lower;
  vec2f upper;
};

struct box2i {
  vec2i lower;
  vec2i upper;
};

struct box3f { 
  vec3f lower;
  vec3f upper;
};

struct box3fa { 
  vec3f lower;
  int32 align0;
  vec3f upper;
  int32 align1;
};

struct box4f { 
  vec4f lower;
  vec4f upper;
};

inline uniform box3f make_box3f(const uniform vec3f lo, const uniform vec3f hi)
{ uniform box3f bb; bb.lower = lo; bb.upper = hi; return bb; }

inline uniform box3fa make_box3fa(const uniform box3f &b)
{ uniform box3fa bb; bb.lower = make_vec3f(b.lower); bb.upper = make_vec3f(b.upper); return bb; }

inline box3f make_box3f(const vec3f lo, const vec3f hi)
{ box3f bb; bb.lower = lo; bb.upper = hi; return bb; }

inline void print_box(const uniform box3f &bbox)
{ 
  print("[(%f %f %f)-(%f %f %f)]",
        bbox.lower.x,
        bbox.lower.y,
        bbox.lower.z,
        bbox.upper.x,
        bbox.upper.y,
        bbox.upper.z); 
}

inline void print_box(const uniform box3fa &bbox)
{ 
  print("[(%f %f %f)-(%f %f %f)]",
        bbox.lower.x,
        bbox.lower.y,
        bbox.lower.z,
        bbox.upper.x,
        bbox.upper.y,
        bbox.upper.z); 
}
