// ======================================================================== //
// Copyright 2009-2015 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "ospray/common/OSPDataType.h"
#include "ospray/volume/StructuredVolume.ih"

//! \brief ISPC variables and functions for the BlockBrickedVolume class,
//!  a concrete implementation of the StructuredVolume class with 64-bit
//!  addressing in which the voxel data is laid out in memory in multiple
//!  pages each in brick order.
//!
struct BlockBrickedVolume {

  //! Fields common to all StructuredVolume subtypes (must be the first entry of this struct).
  StructuredVolume inherited;

  //! Volume size in blocks per dimension with padding to the nearest block.
  uniform vec3i blockCount;

  //! Voxel data.
  void **uniform voxelData;

  //! Voxel type.
  uniform OSPDataType voxelType;

  //! Voxel size in bytes.
  uniform size_t voxelSize;

  //! Voxel data setter.
  void (*uniform setVoxel)(void *uniform volume, const void *uniform source, const uniform vec3i &index, const uniform vec3i &count, const varying vec3i &offset);

};

void BlockBrickedVolume_Constructor(BlockBrickedVolume *uniform volume, const uniform int voxelType, const uniform vec3i &dimensions);
