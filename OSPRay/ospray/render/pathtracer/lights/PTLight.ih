// ======================================================================== //
// Copyright 2009-2015 Intel Corporation                                    //
//                                                                          //
// Licensed under the Apache License, Version 2.0 (the "License");          //
// you may not use this file except in compliance with the License.         //
// You may obtain a copy of the License at                                  //
//                                                                          //
//     http://www.apache.org/licenses/LICENSE-2.0                           //
//                                                                          //
// Unless required by applicable law or agreed to in writing, software      //
// distributed under the License is distributed on an "AS IS" BASIS,        //
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. //
// See the License for the specific language governing permissions and      //
// limitations under the License.                                           //
// ======================================================================== //

#pragma once

#include "../samplers/Sample.ih"
#include "ospray/common/DifferentialGeometry.ih"

struct Shape;

#define TY_LIGHT 0
#define TY_AREA_LIGHT 1
#define TY_ENV_LIGHT 4
#define TY_PRECOMPUTE_LIGHT_SAMPLES 8

enum PTLightType {
  NORMAL_LIGHT = 0, AREA_LIGHT = 1, ENV_LIGHT = 4, PRECOMPUTED_LIGHT = 8
};

/*! A precomputed sample on light source. */
struct PTLightSample 
{
  Sample3f wi;    //!< The direction towards the light source.
  float    tMax;  //!< The largest valid parameter value for a shadow ray.
  vec3f    L;     //!< The importance weighted radiance for this sample.
};

struct PTLight;
struct AreaPTLight;
struct PTEnvironmentLight;

typedef PTLight* uniform (*PTLightTransformFunc)(const uniform PTLight *uniform this, 
                                             const uniform AffineSpace3f& xfm);

typedef Shape* uniform (*ShapeFunc)(const uniform PTLight *uniform this);

typedef varying vec3f (*EnvironmentLeFunc)(const uniform PTEnvironmentLight *uniform _THIS,
                                           varying const vec3f &wo);

typedef varying vec3f (*AreaLeFunc)(const uniform AreaPTLight *uniform _THIS,
                                    varying const DifferentialGeometry &dg, 
                                    varying const vec3f &wo);

typedef varying vec3f (*EvalFunc)(const uniform PTLight *uniform _THIS,
                                  varying const DifferentialGeometry &dg, 
                                  varying const vec3f &wi);

typedef varying vec3f (*SampleFunc)(const uniform PTLight *uniform _THIS,
                                    varying const DifferentialGeometry &dg, 
                                    varying Sample3f &wi,
                                    varying float &tMax,
                                    varying const vec2f &s);

/*! Abstract base class of all embree light sources */
struct PTLight
{
  // RefCount base;

  PTLightType type;
  PTLightTransformFunc transform;
  ShapeFunc shape;
  EvalFunc eval;
  SampleFunc sample;
};

// void PTLight__Destructor(uniform RefCount* uniform this);

void PTLight__Constructor(uniform PTLight* uniform this,
                        // uniform DestructorFunc destructor,
                        uniform PTLightType type,
                        uniform PTLightTransformFunc transform,
                        uniform ShapeFunc shape,
                        uniform EvalFunc eval_,
                        uniform SampleFunc sample_);

struct AreaPTLight {
  PTLight base;
  AreaLeFunc Le;
};

void AreaPTLight__Constructor(uniform AreaPTLight* uniform this,
                            // uniform DestructorFunc destructor,
                            uniform PTLightType type,
                            uniform PTLightTransformFunc transform,
                            uniform ShapeFunc shape,
                            uniform EvalFunc eval_,
                            uniform SampleFunc sample_,
                            uniform AreaLeFunc Le);

struct PTEnvironmentLight {
  PTLight base;
  EnvironmentLeFunc Le;
};

void PTEnvironmentLight__Constructor(uniform PTEnvironmentLight* uniform this,
                                   // uniform DestructorFunc destructor,
                                   uniform PTLightType type,
                                   uniform PTLightTransformFunc transform,
                                   uniform ShapeFunc shape,
                                   uniform EvalFunc eval_,
                                   uniform SampleFunc sample_,
                                   uniform EnvironmentLeFunc Le);

